<?php

namespace frontend\controllers;

use common\models\Category;
use common\models\Travel;
use frontend\models\ResendVerificationEmailForm;
use frontend\models\VerifyEmailForm;
use Yii;
use yii\base\InvalidArgumentException;
use yii\data\Pagination;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\NotFoundHttpException;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::class,
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => \yii\web\ErrorAction::class,
            ],
            'captcha' => [
                'class' => \yii\captcha\CaptchaAction::class,
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function beforeAction($action)
    {
        if(!Yii::$app->session->has('lang')){
            Yii::$app->session->set('lang','ru');
            Yii::$app->language = 'ru';
            header('Location: '.Yii::$app->urlManager->createUrl(['/','language'=>'ru']));
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        return $this->render('index',['name'=>'Главная | Anisatravel.uz']);
    }


    public function actionSearch($s = null){

        $name = "Результаты поиска";
        $code = '11';
        if($s == null){
            $code = "desc";
        }
        $model = null;
        switch ($code){
            case 'desc': $model = Travel::find()->where(['status'=>1])->orderBy(['created'=>SORT_DESC]); break;
            default :
            {
                $code = 'search';
                $model = Travel::find()
                    ->andFilterWhere([
                        'or',
                        ['like', 'name', $s],
                        ['like', 'short', $s],
                        ['like', 'detail', $s],
                        ['like', 'name_en', $s],
                        ['like', 'short_en', $s],
                        ['like', 'detail_en', $s],
                        ['like', 'name_ru', $s],
                        ['like', 'short_ru', $s],
                        ['like', 'detail_ru', $s],
                    ]);
                ;
            }
        }
        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:card',
            'content'=>'summery'
        ]);

        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:title',
            'content'=>$name
        ]);
        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:description',
            'content'=>$name
        ]);

        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:site',
            'content'=>'anisatravel.uz/site/search?s='.$s
        ]);
        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:image',
            'content'=>'/gerb.png'
        ]);
        $countQuery = clone $model;
        $pages = new Pagination(['totalCount' => $countQuery->count(),'pageSize' => 10]);
        $models = $model->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        return $this->render('news', [
            'model' => $models,
            'pages' => $pages,
            'code'=>$s,
            'name'=>$name,
        ]);
    }

    public function actionNews($code = null){


        if($code == null){
            $code = "desc";
            $name = "Все";
        }
        $model = null;
        switch ($code){
            case 'desc' : $model = Travel::find()->where(['status'=>1])->where(['>','id',3])->orderBy(['created'=>SORT_DESC]);break;
            default :
            {
                if($cat_id = Category::findOne(['code'=>$code])){
                    $lang = Yii::$app->language;
                    if($lang == 'uz'){
                        $lang = '';
                    }else{
                        $lang = '_'.$lang;
                    }
                    $code = $cat_id->code;
                    $name = $cat_id->{'name'.$lang};
                    $cat_id = $cat_id->id;
                    $model = Travel::find()->where(['status' => 1])->andWhere(['cat_id'=>$cat_id])->orderBy(['created' => SORT_DESC]);

                }else{
                    $model = false;
                }
            }
        }

        if(!$model){
            throw new NotFoundHttpException();
        }

        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:card',
            'content'=>'summery'
        ]);

        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:title',
            'content'=>$name
        ]);
        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:description',
            'content'=>$name
        ]);

        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:site',
            'content'=>'anisatravel.uz/site/news?code='.$code
        ]);
        Yii::$app->view->registerMetaTag([
            'name'=>'twitter:image',
            'content'=>'/gerb.png'
        ]);


        $countQuery = clone $model;
        $pages = new Pagination(['totalCount' => $countQuery->count(),'pageSize' => 8]);
        $models = $model->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        if($model->count()==0){
            throw new NotFoundHttpException();
        }


        return $this->render('news', [
            'model' => $models,
            'pages' => $pages,
            'code'=>$code,
            'name'=>$name,
            'category'=>Category::findOne($cat_id)
        ]);
    }
    public function actionPage($code = null){
        if($code == null){
            throw new NotFoundHttpException();
        }

        $c = Category::findOne(['code'=>$code]);
        $name=$c->name;
        if($m = News::findOne(['cat_id'=>$c->id])){
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:card',
                'content'=>'summery'
            ]);

            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:title',
                'content'=>$m->name
            ]);
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:description',
                'content'=>$m->preview
            ]);

            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:site',
                'content'=>'qushkupir.uz/site/page?code='.$code
            ]);
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:image',
                'content'=>'/upload/'.$m->image
            ]);

            return $this->render('page',[
                'model'=>$m,
                'code'=>$code,
                'name'=>$name
            ]);
        }else{
            throw new NotFoundHttpException();
        }


    }

    public function actionSitemap(){


        return $this->render('sitemap');

    }

    public function actionView($code){
        if($code == null){
            throw new NotFoundHttpException();
        }
        $lang = Yii::$app->language;
        if($lang == 'uz'){
            $lang = '';
        }else{
            $lang = '_'.$lang;
        }
        if($model = Travel::findOne(['code'=>$code])){
//            $model->show_counter ++;
//            $model->save();
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:card',
                'content'=>'summery'
            ]);

            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:title',
                'content'=>$model->{'name'.$lang}
            ]);
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:description',
                'content'=>$model->{'short'.$lang},
            ]);

            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:site',
                'content'=>'anisatravel.uz/site/view?code='.$code
            ]);
            Yii::$app->view->registerMetaTag([
                'name'=>'twitter:image',
                'content'=>'/upload/'.$model->image
            ]);
            return $this->render('view',[
                'model'=>$model,
                'code'=>$code,
                'name'=>$model->{'name'.$lang},
            ]);
        }else{
            throw new NotFoundHttpException();
        }

    }
    /**
     * Logs in a user.
     *
     * @return mixed
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        $this->layout = 'login';
        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) and $model->login()) {
            return $this->redirect([Yii::$app->user->identity->role->url]);
        }

        $model->password = '';

        return $this->render('login', [
            'model' => $model,
        ]);
    }

    /**
     * Logs out the current user.
     *
     * @return mixed
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * Displays contact page.
     *
     * @return mixed
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail(Yii::$app->params['adminEmail'])) {
                Yii::$app->session->setFlash('success', 'Thank you for contacting us. We will respond to you as soon as possible.');
            } else {
                Yii::$app->session->setFlash('error', 'There was an error sending your message.');
            }

            return $this->refresh();
        }

        return $this->render('contact', [
            'model' => $model,
        ]);
    }

    /**
     * Displays about page.
     *
     * @return mixed
     */
    public function actionAbout()
    {
        return $this->render('about');
    }

    /**
     * Signs user up.
     *
     * @return mixed
     */
    public function actionSignup()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post()) && $model->signup()) {
            Yii::$app->session->setFlash('success', 'Thank you for registration. Please check your inbox for verification email.');
            return $this->goHome();
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    /**
     * Requests password reset.
     *
     * @return mixed
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');

                return $this->goHome();
            }

            Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');
        }

        return $this->render('requestPasswordResetToken', [
            'model' => $model,
        ]);
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password saved.');

            return $this->goHome();
        }

        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }

    /**
     * Verify email address
     *
     * @param string $token
     * @throws BadRequestHttpException
     * @return yii\web\Response
     */
    public function actionVerifyEmail($token)
    {
        try {
            $model = new VerifyEmailForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }
        if (($user = $model->verifyEmail()) && Yii::$app->user->login($user)) {
            Yii::$app->session->setFlash('success', 'Your email has been confirmed!');
            return $this->goHome();
        }

        Yii::$app->session->setFlash('error', 'Sorry, we are unable to verify your account with provided token.');
        return $this->goHome();
    }

    /**
     * Resend verification email
     *
     * @return mixed
     */
    public function actionResendVerificationEmail()
    {
        $model = new ResendVerificationEmailForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');
                return $this->goHome();
            }
            Yii::$app->session->setFlash('error', 'Sorry, we are unable to resend verification email for the provided email address.');
        }

        return $this->render('resendVerificationEmail', [
            'model' => $model
        ]);
    }
}
